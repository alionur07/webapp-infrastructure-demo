name: Terraform Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:

jobs:
  dynam-db-installation:
    runs-on: ubuntu-20.04

    env:
      AWS_REGION: eu-west-1
      S3_BUCKET_NAME: aoa-demo-terraform-state-storage
      DYNAMODB_TABLE_NAME: aoa-demo-terraform-state-locking
      KEY: terraform.tfstate

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create S3 Bucket
        run: |
          aws s3api create-bucket --bucket ${{ env.S3_BUCKET_NAME }} --region ${{ env.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }}

      - name:  S3 Bucket access block
        run: |
          aws s3api put-public-access-block --bucket ${{ env.S3_BUCKET_NAME }} --public-access-block-configuration '{
              "BlockPublicAcls": false,
              "IgnorePublicAcls": false,
              "BlockPublicPolicy": false,
              "RestrictPublicBuckets": false              
            }'
      # - name:  S3 Bucket IAM permission
      #   run: |    
      #     aws s3api put-bucket-policy --bucket ${{ env.S3_BUCKET_NAME }} --policy '{
      #           "Version": "2012-10-17",
      #           "Statement": [
      #               {
      #                   "Effect": "Allow",
      #                   "Action": "s3:ListBucket",
      #                   "Resource": "arn:aws:s3:::${{ env.S3_BUCKET_NAME }}"
      #               },
      #               {
      #                   "Effect": "Allow",
      #                   "Action": ["s3:GetObject", "s3:PutObject", "s3:DeleteObject"],
      #                   "Resource": "arn:aws:s3:::${{ env.S3_BUCKET_NAME }}/${{ env.KEY }}"
      #               }
      #           ]
      #       }'

      - name: Create DynamoDB
        run: |
          aws dynamodb create-table \
              --table-name ${{ env.DYNAMODB_TABLE_NAME }} \
              --attribute-definitions AttributeName=ID,AttributeType=S \
              --key-schema AttributeName=ID,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
              --region ${{ env.AWS_REGION }}

      # - name:  DynamoDB IAM permission
      #   run: |           
      #     # Add specific IAM permissions for DynamoDB table
      #     aws iam put-role-policy --role-name ${{ env.ROLE_NAME }} --policy-name DynamoDBPolicy --policy-document '{
      #       "Version": "2012-10-17",
      #       "Statement": [
      #           {
      #               "Effect": "Allow",
      #               "Action": [
      #                   "dynamodb:DescribeTable",
      #                   "dynamodb:GetItem",
      #                   "dynamodb:PutItem",
      #                   "dynamodb:DeleteItem"
      #               ],
      #               "Resource": "arn:aws:dynamodb:${{ env.AWS_REGION }}:*:table/${{ env.DYNAMODB_TABLE_NAME }}"
      #           }
      #       ]
      #     }' --region ${{ env.AWS_REGION }}

 
  terraform:
    runs-on: ubuntu-20.04
    needs: dynam-db-installation

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Wait for 20 seconds
        run: sleep 20

      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init

      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform plan

      - name: Terraform Apply
        id: generate_token
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve
      
      - name: Wait for approval to Destroy
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: alionur07
          minimum-approvals: 1

      - name: Terraform Destroy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform destroy -auto-approve

#test