name: Terraform Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:

jobs:
  dynamo-db-setup:
    runs-on: ubuntu-20.04

    env:
      AWS_REGION: eu-west-1
      S3_BUCKET_NAME: aoa-demo-terraform-state-storage
      DYNAMODB_TABLE_NAME: aoa-demo-terraform-state-locking
      KEY: terraform.tfstate
      ROLE_NAME: webapp-infra-demo
      ACCOUNT_ID: 401939169387

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create S3 Bucket
        run: |
          aws s3api create-bucket --bucket ${{ env.S3_BUCKET_NAME }} --region ${{ env.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }}

      - name:  S3 Bucket access block
        run: |
          aws s3api put-public-access-block --bucket ${{ env.S3_BUCKET_NAME }} --public-access-block-configuration '{
              "BlockPublicAcls": false,
              "IgnorePublicAcls": false,
              "BlockPublicPolicy": false,
              "RestrictPublicBuckets": false              
            }'

      - name: Create DynamoDB
        run: |
          aws dynamodb create-table \
              --table-name ${{ env.DYNAMODB_TABLE_NAME }} \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
              --region ${{ env.AWS_REGION }}

      - name: Create IAM Role and Attach Admin Policy
        run: |
           aws iam create-role --role-name ${{ env.ROLE_NAME }} --assume-role-policy-document '{
               "Version": "2012-10-17",
               "Statement": [
                   {
                    "Effect": "Allow",
                    "Principal": {
                        "AWS": "arn:aws:iam::${{ env.ACCOUNT_ID }}:root"
                    },
                    "Action": "sts:AssumeRole"
                   }
               ]
           }' --region ${{ env.AWS_REGION }}
           aws iam attach-role-policy --role-name ${{ env.ROLE_NAME }} --policy-arn arn:aws:iam::aws:policy/AdministratorAccess --region ${{ env.AWS_REGION }}
    
  Infrastructure:
    runs-on: ubuntu-20.04
    needs: dynamo-db-setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Wait for 10 seconds
        run: sleep 10

      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init

      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform plan

      - name: Terraform Apply
        id: generate_token
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve
      
      - name: Wait for approval to Destroy
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: alionur07
          minimum-approvals: 1

      - name: Terraform Destroy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform destroy -auto-approve

#test